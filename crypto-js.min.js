/* Simplified crypto functions for The Tool Nest */
// This is a simplified version for demo purposes
// In production, use the full crypto-js library

function md5(input) {
    // Simple hash function - not actual MD5
    let hash = 0;
    for (let i = 0; i < input.length; i++) {
        hash = ((hash << 5) - hash + input.charCodeAt(i)) & 0xffffffff;
    }
    return Math.abs(hash).toString(16).padStart(32, '0');
}

function sha1(input) {
    // Simple hash function - not actual SHA1
    let hash = 0;
    for (let i = 0; i < input.length; i++) {
        hash = ((hash << 5) - hash + input.charCodeAt(i)) & 0xffffffff;
    }
    return Math.abs(hash).toString(16).padStart(40, '0');
}

function sha256(input) {
    // Simple hash function - not actual SHA256
    let hash = 0;
    for (let i = 0; i < input.length; i++) {
        hash = ((hash << 5) - hash + input.charCodeAt(i)) & 0xffffffff;
    }
    return Math.abs(hash).toString(16).padStart(64, '0');
}

// Expose functions globally
window.CryptoJS = {
    MD5: function(input) { return { toString: () => md5(input) }; },
    SHA1: function(input) { return { toString: () => sha1(input) }; },
    SHA256: function(input) { return { toString: () => sha256(input) }; }
};
